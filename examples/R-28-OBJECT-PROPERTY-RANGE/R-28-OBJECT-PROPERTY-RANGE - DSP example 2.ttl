# namespace declarations
# -----
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:     <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:      <http://www.w3.org/2002/07/owl#> . 
@prefix oer:      <http://www.example.org/oer#> .
@prefix ex:       <http://www.example.org/ex#> .
@prefix foaf:     <http://xmlns.com/foaf/0.1/#> .
@prefix dcam:     <http://purl.org/dc/dcam#> .
@prefix dsp:      <http://dublincore.org/dc-dsp#> .
@prefix :         <http://dublincore.org/dc-dsp/ex#> .

# constraints
# -----
    :postalAddress
        a dsp:DescriptionTemplate ;
        dsp:standalone "true"^^xsd:boolean ; 
        dsp:minOccur "1"^^xsd:nonNegativeInteger ; 
        dsp:maxOccur "1"^^xsd:nonNegativeInteger ; 
        dsp:resourceClass ex:PostalAddress ; 
        dsp:statementTemplate [
            a dsp:NonLiteralStatementTemplate ;
            dsp:minOccur "1"^^xsd:nonNegativeInteger ; 
            dsp:maxOccur "5"^^xsd:nonNegativeInteger ; 
            dsp:property ex:knows ; 
            dsp:nonLiteralConstraint [ 
                a dsp:NonLiteralConstraint ;
                dsp:valueClass foaf:Person ] ] .

# invalid data
# -----
ex:myAddress rdf:type ex:PostalAddress .
ex:myAddress ex:knows ex:Antoine .
ex:myAddress ex:knows ex:Thomas .
ex:Antoine rdf:type foaf:Human .
ex:Thomas rdf:type foaf:Human .

# triples needed for validation:
# - automatically infered in future versions
# - as every OWL individual is a owl:Thing
# -----
ex:myAddress rdf:type owl:Thing .
ex:Antoine rdf:type owl:Thing .
ex:Thomas rdf:type owl:Thing .